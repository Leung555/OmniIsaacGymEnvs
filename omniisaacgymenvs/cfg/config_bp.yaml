# Task name - used to pick the class to load
task_name: Cartpole # Ant, dbAlpha, Cartpole
# task_name: ${task.name}
# experiment name. defaults to name of training config
experiment: 'backpropamine'
# experiment: 'PPO_gaitreward'
# experiment: 'dbAlpha_PPO_tanh_sm'

# if set to positive integer, overrides the default number of environments
# num_envs: '' # for default setup
num_envs: 1 # <---------------

# disables rendering
headless: True # <---------------
# test - if set, run policy in inference mode (requires setting checkpoint to load)
test: False # <---------------

wandb_activate: False # <---------------

# Model for learning, 'Feedforward' 'Hebb'
# model: 'Feedforward'  # <---------------
model: 'Hebb'
# model: 'rbf'
# model: 'Hebb_rbf'
# 'FF_hyper_network', 'simple_RBF_hebb', 'hyper_RBFHebb', 
# 'hyper_RBFFF', 'parallel_FF', 'parallel_Hebb'
RBFHebb_model_type: 'hyper_RBFHebb'


EPOCHS: 500 # <---------------
EPISODE_LENGTH: 300 # <--------------- default: 300
SAVE_EVERY: 100 # --166, 250
USE_TRAIN_PARAMS: False # <---------------

Backpropamine:
  rngseed: 0
  rew_bp:  10.0
  wp: .0
  bent: 0.03
  blossv: .1
  msize:  11
  gr: .9
  gc: 4.0
  lr: 0.0001
  eplen: 200
  hs: 100
  bs: 200
  l2: 0 # 3e-
  nbiter: 1000000
  save_every: 50
  pe: 10


# ARCHITECTURE = configs['Model']['HEBB']['ARCHITECTURE']['size']
# ARCHITECTURE: [4, 16, 8, 1] # for cartpole Env Test
# ARCHITECTURE: [60, 128, 64, 8] # for Ant Env Test
# ARCHITECTURE: [102, 128, 64, 18] # for dbAlpha Env Test # old Architecture and Rewards based on  the originall PPO
# ARCHITECTURE: [39, 128, 64, 18] # for dbAlpha Env Test
ARCHITECTURE: [27, 64, 32, 18] # for dbAlpha Env Test
# ARCHITECTURE: [27, 64, 180] # for dbAlpha Env Test


# Test RBF network
# RBF_ARCHITECTURE: [20, 1] # [num_kernel, num_output] cartpole 1 output
# RBF_ARCHITECTURE: [10, 1] # [num_kernel, num_output] Ant 1 output
RBF_ARCHITECTURE: [20, 18] # [num_kernel, num_output] dbAlpha 1 output

# seed - set to -1 to choose random seed
seed: 42
# set to True for deterministic performance
torch_deterministic: False

# set the maximum number of learning iterations to train for. overrides default per-environment setting
max_iterations: ''

## Device config
physics_engine: 'physx'
# whether to use cpu or gpu pipeline
pipeline: 'gpu'
# whether to use cpu or gpu physx
sim_device: 'gpu'
# used for gpu simulation only - device id for running sim and task if pipeline=gpu
device_id: 0
# device to run RL
rl_device: 'cuda:0'
# multi-GPU training
multi_gpu: False

## PhysX arguments
num_threads: 4 # Number of worker threads per scene used by PhysX - for CPU PhysX only.
solver_type: 1 # 0: pgs, 1: tgs

# RLGames Argumentsconfi
# used to set checkpoint path
checkpoint: ''
# checkpoint: 'runs/dbAlpha/nn/dbAlpha.pth'

# enables native livestream
enable_livestream: False
# timeout for MT script
mt_timeout: 30


wandb_group: ''
wandb_name: 'PPO_4096' # ${train.params.config.name}
wandb_entity: ''
wandb_project: 'dbAlpha_ES_log' # 'omniisaacgymenvs'

# set default task and default training config based on task
defaults:
  - task: Cartpole
  - train: ${task}PPO
  - hydra/job_logging: disabled

# set the directory where the output files get saved
hydra:
  output_subdir: null
  run:
    dir: .

